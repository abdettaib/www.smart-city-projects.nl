{% assign product = all_products[section.settings.feature_product] %}
{% include 'product-grid-variables' %}
<div class="main-row {% if section.settings.fullwidth == true %}full-width{% endif  %} {% if section.settings.background == true %} layer-background {% endif  %} {% if section.settings.top_margin %} margin-top{% endif %}" data-section-id="{{ section.id }}">
  <div class="container">
    <div class="row">
      <div class="main-col col-sm-12 col-md-12">
        <div class="row sub-row">
          <div class="sub-col col-sm-12 col-md-12">
            {% include section.settings.feature_product_design %}
          </div>
        </div>
      </div>
    </div>    
  </div>
</div>    
<style>
  {% if section.settings.background_color != settings.section_bg_color -%}
  #shopify-section-{{section.id }} .layer-background {
    background: {{ section.settings.background_color }};
  }
  {%- endif %}
  #shopify-section-{{section.id }} #Quantity {
    float: none;
  }
</style>
<script type="text/javascript">
  $(document).ready(function() {
    // product page add to cart
    $('.button-cart-section').on('click', function(e) {
      e.preventDefault();
      //console.log('#form_buy input[name=\'id\']').val(); 
      $.ajax({
        url: '/cart/add.js',
        type: 'post',
        data: $('#form_buy input[name=\'id\']'),
        dataType: 'json',
        beforeSend: function() {
          $('#button-cart').button('loading');
        },
        complete: function() {
          $('#button-cart').button('reset');
        },
        success: function(json) {
          $('.alert, .text-danger').remove();
          $('.form-group').removeClass('has-error');

          if (json['error']) {
            if (json['error']['option']) {
              for (i in json['error']['option']) {
                var element = $('#input-option' + i.replace('_', '-'));
                if (element.parent().hasClass('input-group')) {
                  element.parent().after('<div class="text-danger">' + json['error']['option'][i] + '</div>');
                } else {
                  element.after('<div class="text-danger">' + json['error']['option'][i] + '</div>');
                }
              }
            }

            if (json['error']['recurring']) {
              $('select[name=\'recurring_id\']').after('<div class="text-danger">' + json['error']['recurring'] + '</div>');
            }

            // Highlight any found errors
            $('.text-danger').parent().addClass('has-error');
          }

          $.getJSON('/cart.js', function(cart) {
            load(cart);
          });

          {% if settings.add_to_cart_layout == 'message' %}
          toastr.success('{{ 'cart.general.item_added' | t | strip }}');
                         $('html, body').animate({ scrollTop: 0 }, 'slow');
          {% elsif settings.add_to_cart_layout == 'redirect' %}
          window.top.location.href="/cart";
          {% endif %}

        },
        error: function(xhr, ajaxOptions, thrownError) {
          if(xhr.status == 422 ) {
            toastr.warning('{{ 'cart.general.item_added_402' | t }}');
                           } else {
                           alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
          }
        }
      });
    });
  });
</script>



<div class="banner-static static2-elomus3{% if section.settings.bottom_padding %} padding-bottom{% endif %} {% if section.settings.bottom_border %} border-bottom{% endif %}">
  <div class="row">
    {% if section.settings.image_position == 'left' %} 
    <div class="col col-image col-sm-6 col-xs-12">
      {% if section.settings.bg-image %}
      <div class="image">
        <a href="{{ section.settings.link }}">
          <img {% if settings.lazyloading_enable %} class="lazyload" data-{% endif %}src="{{ section.settings.bg-image | img_url: 'master' }}" alt=""/>
        </a>
      </div>
      {% elsif product.featured_image %}
      <div class="image">
        <a href="{{ product.url }}" class="product-image">
          {% include 'product-grid-image',image:product.featured_image %}
        </a>
      </div>
      {% endif %}
    </div>
    {% endif %}

    <div class="col col-text col-sm-6 col-xs-12">
      <div class="inner text-{{ section.settings.ad_align }}" style="text-align:{{ section.settings.ad_align }}">
        <div class="module-title" style="text-align:{{ section.settings.ad_align }};">
          {% if section.settings.heading != blank %}  
          <h2>{{ section.settings.heading }}</h2>
          {% endif %}
        </div>
        {% if product.title != blank %} 
        <h3>{{ product.title }}</h3>
        {% endif %}
        {% if section.settings.description and product.description != blank %} 
        <p>
          {% if product.description contains '[summary]' %}
          {{ product.description | split:'[summary]' | last | split :'[/summary]' | first }}
          {% else %}
          {% assign product_summary_words = section.settings.product_summary_words | times: 1 %} 
          {% if section.settings.show_summary_stripped %}
          {{ product.content | split:"[summary]" | first | split:"[video]" | first | split:"[tab]" | first | split:"[deal]" | first | split:"[affiliate]" | first | strip_html | truncatewords: product_summary_words }}
          {% else %}
          {{ product.content | split:"[summary]" | first | split:"[video]" | first | split:"[tab]" | first | split:"[deal]" | first | split:"[affiliate]" | first | truncatewords: product_summary_words }}
          {% endif %}
          {% endif %}
        </p>
        {% endif %}    
        {% if section.settings.price %} 
        <p class="price">{% include 'price', page:true %}</p>
        {% endif %}
        <div id="product">
          {% form 'product', product, id: "form_buy", name: "form_buy" %}
          <input type="hidden" name="id" id="variant" value="{{ product.selected_or_first_available_variant }}">
          <div class="form-group"  {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}style="display:none"{% endif %}>
            <select name="productSelect" id="productSelect" class="form-control">
              {% for variant in product.variants %}
              {% if variant.available %}
              <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>
              {% else %}
              <option disabled="disabled">
                {{ variant.title }} - {{ 'products.product.sold_out' | t }}
              </option>
              {% endif %}
              {% endfor %}
            </select>
            {% if section.settings.show_variant_swatches != 'false' %}
            {% if product.available and product.variants.size > 1 %}
            {% for option in product.options %}
            {% include 'swatch' with option %}
            {% endfor %}
            {% endif %}
            {% else %}
            <style type="text/css">
              .selector-wrapper {
                display: block;
              }
              #productSelect {
                display: block;
              }
            </style>
            {% endif %}
          </div>
          <div class="form-group" style="width: 100%;">
            {% if section.settings.product_quantity_enable %}
            <label class="control-label" for="Quantity">{{ 'products.product.quantity' | t }}:</label>
            <input type="text" name="quantity" value="1" size="2" id="Quantity" class="form-control" />
            {% endif %}
          </div>
          <div class="form-group">
            {% if section.settings.view_details %}
            <button class="button btn-compare" type="button" data-toggle="tooltip" title="{{ 'products.product.view_details' | t }}" onclick="window.top.location.href='{{ product.url }}';">
              {{ 'products.product.view_details' | t }}
            </button>
            {% endif %}
            {% if section.settings.add_to_cart %} 
            {% if product.description contains "[affiliate]" %}
            {% capture affiliate %} {{ product.description | split:'[affiliate]' | last | split :'[/affiliate]' | first }} {% endcapture %}
            <button class="button  btn" type="button" onclick="window.open('{{ affiliate | split :'|' | last }}', '_blank')" id="button-cart-affiliate" data-loading-text="{{ 'products.product.loading' | t }}">
              {{ affiliate | split :'|' | first }}
            </button>
            {% else %}
            {% if template != 'product.pre-order' %}
            <button class="button button-cart-section btn {% if sold_out %} btn disabled {% endif %}" type="button" data-toggle="tooltip" data-loading-text="{{ 'products.product.loading' | t }}" title="{{ 'products.product.add_to_cart' | t }}" {% if sold_out == false %}onclick="{% if product.variants.first.available %}cart.add('{{  product.variants.first.id  }}'){% else %}window.top.location.href='{{product.url}}'{% endif %};"{% endif %}>
              <span>{% if sold_out == false %}{{ 'products.product.add_to_cart' | t }}{% else %} {{ 'products.product.sold_out' | t }}{% endif %}</span>
            </button>
            {% endif %}
            {% if section.settings.buy_now %}
            <button class="button button-cart btn" style="clear:none;" type="button" data-loading-text="{{ 'products.product.loading' | t }}" onclick="{% if product.variants.first.available %}cart.add('{{  product.variants.first.id  }}',1,true){% else %}window.top.location.href='{{product.url}}'{% endif %};">
              {{ 'products.product.buy_now' | t }}
            </button>
            {% endif %}
            {% elsif template == 'product.pre-order' %}
            <button class="button button-cart btn" type="button" id="button-cart-buy" data-loading-text="{{ 'products.product.loading' | t }}">
              {{ 'products.product.pre_order' | t }}
            </button> 
            {% endif %}      
            {% endif %}
          </div>
          {% endform %}
          <!-- end-button -->
        </div>

      </div>
    </div>
    {% if section.settings.image_position == 'right' %} 
    <div class="col col-image col-sm-6 col-xs-12">
      {% if section.settings.bg-image %}
      <div class="image">
        <a href="{{ section.settings.link }}">
          <img {% if settings.lazyloading_enable %} class="lazyload" data-{% endif %}src="{{ section.settings.bg-image | img_url: 'master' }}" alt=""/>
        </a>
      </div>
      {% elsif product.featured_image %}
      <div class="image">
        <a href="{{ product.url }}" class="product-image">
          {% include 'product-grid-image',image:product.featured_image %}
        </a>
      </div>
      {% endif %}
    </div>
    {% endif %}
  </div>
</div>
{% comment %}
<script type="text/javascript">
  
  {% if section.settings.enable_preload %}
  // Pre-loading product images, to avoid a lag when a thumbnail is clicked, or
  // when a variant is selected that has a variant image.
  Shopify.Image.preload({{ product.images | json }}, 'master');
  {% endif %}
  
  var selectCallback = function(variant, selector) {

    var $addToCart = $('#button-cart'),
        $addToCartBuy = $('#button-cart-buy'),
        $addToCartSticky = $('#button-cart-sticky'),
        $productPrice = $('#productPrice'),
        $comparePrice = $('#comparePrice'),
        $variantQuantity = $('#variantQuantity'),
        $quantityElements = $('.quantity-selector, label + .js-qty'),
        $addToCartText = $('#button-cart'),
        $featuredImage = $('#productPhotoImg');
    if (variant) {
      // Update variant image, if one is set
      // Call timber.switchImage function in shop.js
//       if (variant.featured_image) {
//         var newImg = variant.featured_image,
//             el = $featuredImage[0];
//         $(function() {
//           Shopify.Image.switchImage(newImg, el, timber.switchImage);
//           {% if section.settings.product_sticky_layout == true %}
//           $('body,html').animate({scrollTop: 125}, 800);
//           return false;
//           {% endif %}
//         });
//       }

      // Select a valid variant if available
      if (variant.available) {
        // We have a valid product variant, so enable the submit button
        $addToCart.removeClass('disabled').prop('disabled', false);
        $addToCartBuy.removeClass('disabled').prop('disabled', false);
        $addToCartSticky.removeClass('disabled').prop('disabled', false);
        {% if template == 'product.pre-order' %}
        $addToCartText.html({{ 'products.product.pre_order' | t | json }});
        $addToCartSticky.html({{ 'products.product.pre_order' | t | json }});
        $addToCartBuy.html({{ 'products.product.pre_order' | t | json }});
        {% else %}
        $addToCartText.html({{ 'products.product.add_to_cart' | t | json }});
        $addToCartSticky.html({{ 'products.product.add_to_cart' | t | json }});
        $addToCartBuy.html({{ 'products.product.buy_now' | t | json }});
        {% endif %}
        $quantityElements.show();
        // Show how many items are left, if below 10

        if (variant.inventory_management) {
          
                                                    }
                                                    } else {
              // Variant is sold out, disable the submit button
              $addToCart.addClass('disabled').prop('disabled', true);
              $addToCartBuy.addClass('disabled').prop('disabled', true);
              $addToCartSticky.addClass('disabled').prop('disabled', true);
              $addToCartText.html({{ 'products.product.sold_out' | t | json }});
              $addToCartBuy.html({{ 'products.product.sold_out' | t | json }});
              $addToCartSticky.html({{ 'products.product.sold_out' | t | json }});
              $variantQuantity.removeClass('is-visible');
              $('.ex-text').html('{{ 'products.product.out_stock' | t }}').css("color", "red");
                                 if (variant.incoming) {
                $variantQuantity.html({{ 'products.product.will_be_in_stock_after' | t: date: '[date]' | json }}.replace('[date]', variant.next_incoming_date)).addClass('is-visible');
              }
              else {
                $variantQuantity.addClass('hide');
              }
              $quantityElements.hide();
            }

            // Regardless of stock, update the product price
            Shopify.money_format = '{% if settings.currency_format == 'money_format' %}{{shop.money_format }}{% else %}{{shop.money_with_currency_format }}{% endif %}'; 

            //var customPrice = timber.formatMoney( Shopify.formatMoney(variant.price,Shopify.money_format) );
            var a11yPrice = Shopify.formatMoney(variant.price, Shopify.money_format);
            // var customPriceFormat = ' <span aria-hidden="true">' + customPrice + '</span>';
            var customPriceFormat = ' <span class="visually-hidden">' + a11yPrice + '</span>';
            $productPrice.html(customPriceFormat);

            // Also update and show the product's compare price if necessary
            {% if settings.product_show_compare_at_price %}
            if ( variant.compare_at_price > variant.price ) {
              var a11yComparePrice = Shopify.formatMoney(variant.compare_at_price, Shopify.money_format);
              comparePriceFormat = ' <span class="visually-hidden">' + a11yComparePrice + '</span>';
              $comparePrice.html(comparePriceFormat);
              $comparePrice.show();
            } else {
              $comparePrice.hide();
            }
            {% endif %}


          } else {
            // The variant doesn't exist, disable submit button.
            // This may be an error or notice that a specific variant is not available.
            $addToCart.addClass('disabled').prop('disabled', true);
            $addToCartBuy.addClass('disabled').prop('disabled', true);
            $addToCartSticky.addClass('disabled').prop('disabled', true);
            $addToCartText.html({{ 'products.product.unavailable' | t | json }});
            $addToCartBuy.html({{ 'products.product.unavailable' | t | json }});
            $addToCartSticky.html({{ 'products.product.unavailable' | t | json }});
            $variantQuantity.removeClass('is-visible');
            $quantityElements.hide();
          }
          if (variant && variant.featured_image) {
            var originalImage = $(".cloud-zoom.main-image img");
            var newImage = variant.featured_image;
            var element = originalImage[0];
            Shopify.Image.switchImage(newImage, element, function (newImageSizedSrc, newImage, element) {
              $(element).parents('a').attr('href', newImageSizedSrc);
              $(element).attr('src', newImageSizedSrc);       
              {% if settings.lazyloading_enable %} $(element).attr('data-src', newImageSizedSrc);  {% endif %}
              $('#light-box-position').val(newImage.position);
              $('.cloud-zoom, .cloud-zoom-gallery').CloudZoom();

            });
          }
          // BEGIN SWATCHES
          if (variant) {
            //console.log('#' + selector.domIdPrefix);
            var form = $('#' + selector.domIdPrefix).closest('form');
            //console.log(form);
            for (var i=0,length=variant.options.length; i<length; i++) {
              var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] +'"]');
              if (radioButton.size()) {
                radioButton.get(0).checked = true;
              }
            }
          }
          // END SWATCHES
          {% if section.settings.product_show_sku %}
          // SHOW/HIDE SKU
          if (variant) {
            $('.variant-sku').text(variant.sku);
            if(variant.sku != '')
              $('.skuvariant').show();
            else 
              $('.skuvariant').hide();
          } else {
            $('.variant-sku').empty();
          }
          {% endif %}
          {% if section.settings.product_show_barcode %}
          // SHOW/HIDE Barcode
          if (variant) {
            $('.variant-barcode').text(variant.barcode);
            if(variant.barcode != '')
              $('.barcodevariant').show();
            else 
              $('.barcodevariant').hide();
          } else {
            $('.variant-barcode').empty();
          }
          {% endif %}
          // Sticky Add to cart
          if (variant) {
            var select1 = $('#form_buy').find('select[name="productSelect"]').val();
            $('#form_buy_sticky').find('select[name="id"]').val($('#form_buy').find('select[name="id"]').val());

            $('#form_buy_sticky').find('.special-price .price').html(customPriceFormat);
            {% if settings.product_show_compare_at_price %}
            if ( variant.compare_at_price > variant.price ) {
              $('#form_buy_sticky').find('.old-price .price').html(comparePriceFormat);
            }
            {% endif %}

            if (variant.featured_image) {
              var originalImageSticky = $("#form_buy_sticky img");
              var newImage = variant.featured_image;
              var element = originalImageSticky[0];
              Shopify.Image.switchImage(newImage, element, function (newImageSizedSrc, newImage, element) {
                $(element).parents('a').attr('href', newImageSizedSrc);
                $(element).attr('src', newImageSizedSrc);
              	{% if settings.lazyloading_enable %} $(element).attr('data-src', newImageSizedSrc);  {% endif %}
              });
            }
          }

          {% if settings.show_multiple_currencies %}
          var defaultCurrency = '{{ settings.default_currency | default: shop.currency }}';
          var shopCurrency = '{{ shop.currency }}';
          var cookieCurrency = Currency.cookie.read();
          if (cookieCurrency == null) {
            Currency.convertAll(shopCurrency, defaultCurrency);
          } else {
            Currency.convertAll(shopCurrency, cookieCurrency);
          }    
          {% endif %}

        };

  jQuery(function($) {
          var product = {{ product | json }};
          {% if section.settings.product_quantity_message %}
          {% for variant in product.variants %}
          product.variants[{{ forloop.index0}}].incoming = {{ variant.incoming | default: false }};
          product.variants[{{ forloop.index0}}].next_incoming_date = {{ variant.next_incoming_date | date: format: 'month_day_year' | json }};
          {% endfor %}
          {% endif %}

          new Shopify.OptionSelectors('productSelect', {
            product: product,
            onVariantSelected: selectCallback,
            enableHistoryState: true
          });

          // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
          {% if product.options.size == 1 and product.options.first != 'Title' %}
          $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first | escape }}</label>');
          {% endif %}
          /* Hide selectors if we only have 1 variant and its title contains 'Default'. */
          {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
          $('.selector-wrapper').hide();
          // Sticky Add to cart
          $("#title").removeClass("hidden-sm hidden-xs").addClass( "col-7" );
          {% else %}
          $('#variantBreak').removeClass('hr--clear');
          {% endif %}
          //$('.selector-wrapper').hide();
        }); 
</script>
{% if section.settings.show_variant_swatches != 'false' %}
{% include 'linked-options' %}
{% endif %}
{% endcomment %}